{"version":3,"sources":["node_modules/emailjs-imap-client/src/emailjs-imap-client-imap.js"],"names":[],"mappings":"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","file":"node_modules/emailjs-imap-client/src/emailjs-imap-client-imap.js","sourcesContent":["(function(root, factory) {\n    'use strict';\n\n    if (typeof define === 'function' && define.amd) {\n        define(['emailjs-tcp-socket', 'emailjs-imap-handler', 'emailjs-mime-codec', 'emailjs-imap-client-compression'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('emailjs-tcp-socket'), require('emailjs-imap-handler'), require('emailjs-mime-codec'), require('./emailjs-imap-client-compression'), null);\n    }\n}(this, function(TCPSocket, imapHandler, mimecodec, Compression) {\n    'use strict';\n\n    //\n    // constants used for communication with the worker\n    //\n    var MESSAGE_START = 'start';\n    var MESSAGE_INFLATE = 'inflate';\n    var MESSAGE_INFLATED_DATA_READY = 'inflated_ready';\n    var MESSAGE_DEFLATE = 'deflate';\n    var MESSAGE_DEFLATED_DATA_READY = 'deflated_ready';\n\n    var COMMAND_REGEX = /(\\{(\\d+)(\\+)?\\})?\\r?\\n/;\n    var EOL = '\\r\\n';\n\n    /**\n     * Creates a connection object to an IMAP server. Call `connect` method to inititate\n     * the actual connection, the constructor only defines the properties but does not actually connect.\n     *\n     * @constructor\n     *\n     * @param {String} [host='localhost'] Hostname to conenct to\n     * @param {Number} [port=143] Port number to connect to\n     * @param {Object} [options] Optional options object\n     * @param {Boolean} [options.useSecureTransport] Set to true, to use encrypted connection\n     * @param {String} [options.compressionWorkerPath] offloads de-/compression computation to a web worker, this is the path to the browserified emailjs-compressor-worker.js\n     */\n    function Imap(host, port, options) {\n        this.options = options || {};\n\n        this.port = port || (this.options.useSecureTransport ? 993 : 143);\n        this.host = host || 'localhost';\n\n        // Use a TLS connection. Port 993 also forces TLS.\n        this.options.useSecureTransport = 'useSecureTransport' in this.options ? !!this.options.useSecureTransport : this.port === 993;\n\n        this.secureMode = !!this.options.useSecureTransport; // Does the connection use SSL/TLS\n\n        this._connectionReady = false; // Is the conection established and greeting is received from the server\n\n        this._globalAcceptUntagged = {}; // Global handlers for unrelated responses (EXPUNGE, EXISTS etc.)\n\n        this._clientQueue = []; // Queue of outgoing commands\n        this._canSend = false; // Is it OK to send something to the server\n        this._tagCounter = 0; // Counter to allow uniqueue imap tags\n        this._currentCommand = false; // Current command that is waiting for response from the server\n\n        this._idleTimer = false; // Timer waiting to enter idle\n        this._socketTimeoutTimer = false; // Timer waiting to declare the socket dead starting from the last write\n\n        this.compressed = false; // Is the connection compressed and needs inflating/deflating\n        this._workerPath = this.options.compressionWorkerPath; // The path for the compressor's worker script\n        this._compression = new Compression();\n\n        //\n        // HELPERS\n        //\n\n        // As the server sends data in chunks, it needs to be split into separate lines. Helps parsing the input.\n        this._incomingBuffer = '';\n        this._command = '';\n        this._literalRemaining = 0;\n\n        //\n        // Event placeholders, may be overriden with callback functions\n        //\n        this.oncert = null;\n        this.onerror = null; // Irrecoverable error occurred. Connection to the server will be closed automatically.\n        this.onready = null; // The connection to the server has been established and greeting is received\n        this.onidle = null;  // There are no more commands to process\n    }\n\n    // Constants\n\n    /**\n     * How much time to wait since the last response until the connection is considered idling\n     */\n    Imap.prototype.TIMEOUT_ENTER_IDLE = 1000;\n\n    /**\n     * Lower Bound for socket timeout to wait since the last data was written to a socket\n     */\n    Imap.prototype.TIMEOUT_SOCKET_LOWER_BOUND = 10000;\n\n    /**\n     * Multiplier for socket timeout:\n     *\n     * We assume at least a GPRS connection with 115 kb/s = 14,375 kB/s tops, so 10 KB/s to be on\n     * the safe side. We can timeout after a lower bound of 10s + (n KB / 10 KB/s). A 1 MB message\n     * upload would be 110 seconds to wait for the timeout. 10 KB/s === 0.1 s/B\n     */\n    Imap.prototype.TIMEOUT_SOCKET_MULTIPLIER = 0.1;\n\n    // PUBLIC METHODS\n\n    /**\n     * Initiate a connection to the server. Wait for onready event\n     *\n     * @param {Object} Socket\n     *     TESTING ONLY! The TCPSocket has a pretty nonsensical convenience constructor,\n     *     which makes it hard to mock. For dependency-injection purposes, we use the\n     *     Socket parameter to pass in a mock Socket implementation. Should be left blank\n     *     in production use!\n     * @returns {Promise} Resolves when socket is opened\n     */\n    Imap.prototype.connect = function(Socket) {\n        return new Promise((resolve, reject) => {\n            this.socket = (Socket || TCPSocket).open(this.host, this.port, {\n                binaryType: 'arraybuffer',\n                useSecureTransport: this.secureMode,\n                ca: this.options.ca,\n                tlsWorkerPath: this.options.tlsWorkerPath\n            });\n\n            // allows certificate handling for platform w/o native tls support\n            // oncert is non standard so setting it might throw if the socket object is immutable\n            try {\n                this.socket.oncert = (cert) => { this.oncert && this.oncert(cert); };\n            } catch (E) {}\n\n            // Connection closing unexpected is an error\n            this.socket.onclose = () => this._onError(new Error('Socket closed unexceptedly!'));\n            this.socket.ondata = (evt) => this._onData(evt);\n\n            // if an error happens during create time, reject the promise\n            this.socket.onerror = (e) => {\n                reject(new Error('Could not open socket: ' + e.data.message));\n            };\n\n            this.socket.onopen = () => {\n                // use proper \"irrecoverable error, tear down everything\"-handler only after socket is open\n                this.socket.onerror = (e) => this._onError(e);\n                resolve();\n            };\n        });\n    };\n\n    /**\n     * Closes the connection to the server\n     *\n     * @returns {Promise} Resolves when the socket is closed\n     */\n    Imap.prototype.close = function() {\n        return new Promise((resolve) => {\n            var tearDown = () => {\n                this._clientQueue = [];\n                this._currentCommand = false;\n\n                clearTimeout(this._idleTimer);\n                this._idleTimer = null;\n\n                clearTimeout(this._socketTimeoutTimer);\n                this._socketTimeoutTimer = null;\n\n                if (this.socket) {\n                    // remove all listeners\n                    this.socket.onopen = null;\n                    this.socket.onclose = null;\n                    this.socket.ondata = null;\n                    this.socket.onerror = null;\n                    try {\n                        this.socket.oncert = null;\n                    } catch (E) {}\n\n                    this.socket = null;\n                }\n\n                resolve();\n            };\n\n            this._disableCompression();\n\n            if (!this.socket || this.socket.readyState !== 'open') {\n                return tearDown();\n            }\n\n            this.socket.onclose = this.socket.onerror = tearDown; // we don't really care about the error here\n            this.socket.close();\n        });\n    };\n\n    /**\n     * Send LOGOUT to the server.\n     *\n     * Use is discouraged!\n     *\n     * @returns {Promise} Resolves when connection is closed by server.\n     */\n    Imap.prototype.logout = function() {\n        return new Promise((resolve, reject) => {\n            this.socket.onclose = this.socket.onerror = () => {\n                this.close().then(resolve).catch(reject);\n            };\n\n            this.enqueueCommand('LOGOUT');\n        });\n    };\n\n    /**\n     * Initiates TLS handshake\n     */\n    Imap.prototype.upgrade = function() {\n        this.secureMode = true;\n        this.socket.upgradeToSecure();\n    };\n\n    /**\n     * Schedules a command to be sent to the server.\n     * See https://github.com/Kreata/imapHandler for request structure.\n     * Do not provide a tag property, it will be set by the queue manager.\n     *\n     * To catch untagged responses use acceptUntagged property. For example, if\n     * the value for it is 'FETCH' then the reponse includes 'payload.FETCH' property\n     * that is an array including all listed * FETCH responses.\n     *\n     * @param {Object} request Structured request object\n     * @param {Array} acceptUntagged a list of untagged responses that will be included in 'payload' property\n     * @param {Object} [options] Optional data for the command payload\n     * @returns {Promise} Promise that resolves when the corresponding response was received\n     */\n    Imap.prototype.enqueueCommand = function(request, acceptUntagged, options) {\n        if (typeof request === 'string') {\n            request = {\n                command: request\n            };\n        }\n\n        acceptUntagged = [].concat(acceptUntagged || []).map((untagged) => (untagged || '').toString().toUpperCase().trim());\n\n        var tag = 'W' + (++this._tagCounter);\n        request.tag = tag;\n\n        return new Promise((resolve, reject) => {\n            var data = {\n                tag: tag,\n                request: request,\n                payload: acceptUntagged.length ? {} : undefined,\n                callback: (response) => {\n                    if (this.isError(response)) {\n                        return reject(response);\n                    } else if (['NO', 'BAD'].indexOf((response && response.command || '').toString().toUpperCase().trim()) >= 0) {\n                        var error = new Error(response.humanReadable || 'Error');\n                        if (response.code) {\n                            error.code = response.code;\n                        }\n                        return reject(error);\n                    }\n\n                    resolve(response);\n                }\n            };\n\n            // apply any additional options to the command\n            Object.keys(options || {}).forEach((key) => data[key] = options[key]);\n\n            acceptUntagged.forEach((command) => data.payload[command] = []);\n\n            // if we're in priority mode (i.e. we ran commands in a precheck),\n            // queue any commands BEFORE the command that contianed the precheck,\n            // otherwise just queue command as usual\n            var index = data.ctx ? this._clientQueue.indexOf(data.ctx) : -1;\n            if (index >= 0) {\n                data.tag += '.p';\n                data.request.tag += '.p';\n                this._clientQueue.splice(index, 0, data);\n            } else {\n                this._clientQueue.push(data);\n            }\n\n            if (this._canSend) {\n                this._sendRequest();\n            }\n        });\n    };\n\n    /**\n     * Send data to the TCP socket\n     * Arms a timeout waiting for a response from the server.\n     *\n     * @param {String} str Payload\n     */\n    Imap.prototype.send = function(str) {\n        var buffer = mimecodec.toTypedArray(str).buffer,\n            timeout = this.TIMEOUT_SOCKET_LOWER_BOUND + Math.floor(buffer.byteLength * this.TIMEOUT_SOCKET_MULTIPLIER);\n\n        clearTimeout(this._socketTimeoutTimer); // clear pending timeouts\n        this._socketTimeoutTimer = setTimeout(() => this._onError(new Error(this.options.sessionId + ' Socket timed out!')), timeout); // arm the next timeout\n\n        if (this.compressed) {\n            this._sendCompressed(buffer);\n        } else {\n            this.socket.send(buffer);\n        }\n    };\n\n    /**\n     * Set a global handler for an untagged response. If currently processed command\n     * has not listed untagged command it is forwarded to the global handler. Useful\n     * with EXPUNGE, EXISTS etc.\n     *\n     * @param {String} command Untagged command name\n     * @param {Function} callback Callback function with response object and continue callback function\n     */\n    Imap.prototype.setHandler = function(command, callback) {\n        this._globalAcceptUntagged[command.toUpperCase().trim()] = callback;\n    };\n\n    // INTERNAL EVENTS\n\n    /**\n     * Error handler for the socket\n     *\n     * @event\n     * @param {Event} evt Event object. See evt.data for the error\n     */\n    Imap.prototype._onError = function(evt) {\n        var error;\n        if (this.isError(evt)) {\n            error = evt;\n        } else if (evt && this.isError(evt.data)) {\n            error = evt.data;\n        } else {\n            error = new Error(evt && evt.data && evt.data.message || evt.data || evt || 'Error');\n        }\n\n        this.logger.error(error);\n\n        // always call onerror callback, no matter if close() succeeds or fails\n        this.close().then(() => {\n            this.onerror && this.onerror(error);\n        }, () => {\n            this.onerror && this.onerror(error);\n        });\n    };\n\n    /**\n     * Handler for incoming data from the server. The data is sent in arbitrary\n     * chunks and can't be used directly so this function makes sure the data\n     * is split into complete lines before the data is passed to the command\n     * handler\n     *\n     * @param {Event} evt\n     */\n    Imap.prototype._onData = function(evt) {\n        clearTimeout(this._socketTimeoutTimer); // clear the timeout, the socket is still up\n        this._socketTimeoutTimer = null;\n\n        this._incomingBuffer += mimecodec.fromTypedArray(evt.data); // append to the incoming buffer\n        this._parseIncomingCommands(this._iterateIncomingBuffer()); // Consume the incoming buffer\n    };\n\n    Imap.prototype._iterateIncomingBuffer = function* () {\n        var match;\n        // The input is interesting as long as there are complete lines\n        while ((match = this._incomingBuffer.match(COMMAND_REGEX))) {\n            if (this._literalRemaining && this._literalRemaining > this._incomingBuffer.length) {\n                // we're expecting more incoming literal data than available, wait for the next chunk\n                return;\n            }\n\n            if (this._literalRemaining) {\n                // we're expecting incoming literal data:\n                // take portion of pending literal data from the chunk, parse the remaining buffer in the next iteration\n                this._command += this._incomingBuffer.substr(0, this._literalRemaining);\n                this._incomingBuffer = this._incomingBuffer.substr(this._literalRemaining);\n                this._literalRemaining = 0;\n                continue;\n            }\n\n            if (match[2]) {\n                // we have a literal data command:\n                // take command portion (match.index) including the literal data octet count (match[0].length)\n                // from the chunk, parse the literal data in the next iteration\n                this._literalRemaining = Number(match[2]);\n                this._command += this._incomingBuffer.substr(0, match.index + match[0].length);\n                this._incomingBuffer = this._incomingBuffer.substr(match.index + match[0].length);\n                continue;\n            }\n\n            // we have a complete command, pass on to processing\n            this._command += this._incomingBuffer.substr(0, match.index);\n            this._incomingBuffer = this._incomingBuffer.substr(match.index + match[0].length);\n            yield this._command;\n\n            this._command = ''; // clear for next iteration\n        }\n    };\n\n\n\n    // PRIVATE METHODS\n\n    /**\n     * Processes a command from the queue. The command is parsed and feeded to a handler\n     */\n    Imap.prototype._parseIncomingCommands = function(commands) {\n        for (var command of commands) {\n            this._clearIdle();\n\n            /*\n             * The \"+\"-tagged response is a special case:\n             * Either the server can asks for the next chunk of data, e.g. for the AUTHENTICATE command.\n             *\n             * Or there was an error in the XOAUTH2 authentication, for which SASL initial client response extension\n             * dictates the client sends an empty EOL response to the challenge containing the error message.\n             *\n             * Details on \"+\"-tagged response:\n             *   https://tools.ietf.org/html/rfc3501#section-2.2.1\n             */\n            //\n            if (/^\\+/.test(command)) {\n                if (this._currentCommand.data.length) {\n                    // feed the next chunk of data\n                    var chunk = this._currentCommand.data.shift();\n                    chunk += (!this._currentCommand.data.length ? EOL : ''); // EOL if there's nothing more to send\n                    this.send(chunk);\n                } else if (this._currentCommand.errorResponseExpectsEmptyLine) {\n                    this.send(EOL); // XOAUTH2 empty response, error will be reported when server continues with NO response\n                }\n                continue;\n            }\n\n            var response;\n            try {\n                response = imapHandler.parser(command.trim());\n                this.logger.debug('S:', imapHandler.compiler(response, false, true));\n            } catch (e) {\n                this.logger.error('Error parsing imap command!', response);\n                return this._onError(e);\n            }\n\n            this._processResponse(response);\n            this._handleResponse(response);\n\n            // first response from the server, connection is now usable\n            if (!this._connectionReady) {\n                this._connectionReady = true;\n                this.onready && this.onready();\n            }\n        }\n    };\n\n    /**\n     * Feeds a parsed response object to an appropriate handler\n     *\n     * @param {Object} response Parsed command object\n     */\n    Imap.prototype._handleResponse = function(response) {\n        var command = (response && response.command || '').toUpperCase().trim();\n\n        if (!this._currentCommand) {\n            // unsolicited untagged response\n            if (response.tag === '*' && command in this._globalAcceptUntagged) {\n                this._globalAcceptUntagged[command](response);\n                this._canSend = true;\n                this._sendRequest();\n            }\n        } else if (this._currentCommand.payload && response.tag === '*' && command in this._currentCommand.payload) {\n            // expected untagged response\n            this._currentCommand.payload[command].push(response);\n        } else if (response.tag === '*' && command in this._globalAcceptUntagged) {\n            // unexpected untagged response\n            this._globalAcceptUntagged[command](response);\n            this._canSend = true;\n            this._sendRequest();\n        } else if (response.tag === this._currentCommand.tag) {\n            // tagged response\n            if (this._currentCommand.payload && Object.keys(this._currentCommand.payload).length) {\n                response.payload = this._currentCommand.payload;\n            }\n            this._currentCommand.callback(response);\n            this._canSend = true;\n            this._sendRequest();\n        }\n    };\n\n    /**\n     * Sends a command from client queue to the server.\n     */\n    Imap.prototype._sendRequest = function() {\n        if (!this._clientQueue.length) {\n            return this._enterIdle();\n        }\n        this._clearIdle();\n\n        // an operation was made in the precheck, no need to restart the queue manually\n        this._restartQueue = false;\n\n        var command = this._clientQueue[0];\n        if (typeof command.precheck === 'function') {\n            // remember the context\n            var context = command;\n            var precheck = context.precheck;\n            delete context.precheck;\n\n            // we need to restart the queue handling if no operation was made in the precheck\n            this._restartQueue = true;\n\n            // invoke the precheck command and resume normal operation after the promise resolves\n            precheck(context).then(() => {\n                // we're done with the precheck\n                if (this._restartQueue) {\n                    // we need to restart the queue handling\n                    this._sendRequest();\n                }\n            }).catch((err) => {\n                // precheck failed, so we remove the initial command\n                // from the queue, invoke its callback and resume normal operation\n                var cmd, index = this._clientQueue.indexOf(context);\n                if (index >= 0) {\n                    cmd = this._clientQueue.splice(index, 1)[0];\n                }\n                if (cmd && cmd.callback) {\n                    cmd.callback(err);\n                    this._canSend = true;\n                    this._parseIncomingCommands(this._iterateIncomingBuffer()); // Consume the rest of the incoming buffer\n                    this._sendRequest(); // continue sending\n                }\n            });\n            return;\n        }\n\n        this._canSend = false;\n        this._currentCommand = this._clientQueue.shift();\n\n        try {\n            this._currentCommand.data = imapHandler.compiler(this._currentCommand.request, true);\n            this.logger.debug('C:', imapHandler.compiler(this._currentCommand.request, false, true)); // excludes passwords etc.\n        } catch (e) {\n            this.logger.error('Error compiling imap command!', this._currentCommand.request);\n            return this._onError(new Error('Error compiling imap command!'));\n        }\n\n        var data = this._currentCommand.data.shift();\n\n        this.send(data + (!this._currentCommand.data.length ? EOL : ''));\n        return this.waitDrain;\n    };\n\n    /**\n     * Emits onidle, noting to do currently\n     */\n    Imap.prototype._enterIdle = function() {\n        clearTimeout(this._idleTimer);\n        this._idleTimer = setTimeout(() => (this.onidle && this.onidle()), this.TIMEOUT_ENTER_IDLE);\n    };\n\n    /**\n     * Cancel idle timer\n     */\n    Imap.prototype._clearIdle = function() {\n        clearTimeout(this._idleTimer);\n        this._idleTimer = null;\n    };\n\n    /**\n     * Method processes a response into an easier to handle format.\n     * Add untagged numbered responses (e.g. FETCH) into a nicely feasible form\n     * Checks if a response includes optional response codes\n     * and copies these into separate properties. For example the\n     * following response includes a capability listing and a human\n     * readable message:\n     *\n     *     * OK [CAPABILITY ID NAMESPACE] All ready\n     *\n     * This method adds a 'capability' property with an array value ['ID', 'NAMESPACE']\n     * to the response object. Additionally 'All ready' is added as 'humanReadable' property.\n     *\n     * See possiblem IMAP Response Codes at https://tools.ietf.org/html/rfc5530\n     *\n     * @param {Object} response Parsed response object\n     */\n    Imap.prototype._processResponse = function(response) {\n        var command = (response && response.command || '').toString().toUpperCase().trim(),\n            option,\n            key;\n\n        // no attributes\n        if (!response || !response.attributes || !response.attributes.length) {\n            return;\n        }\n\n        // untagged responses w/ sequence numbers\n        if (response.tag === '*' && /^\\d+$/.test(response.command) && response.attributes[0].type === 'ATOM') {\n            response.nr = Number(response.command);\n            response.command = (response.attributes.shift().value || '').toString().toUpperCase().trim();\n        }\n\n        // no optional response code\n        if (['OK', 'NO', 'BAD', 'BYE', 'PREAUTH'].indexOf(command) < 0) {\n            return;\n        }\n\n        // If last element of the response is TEXT then this is for humans\n        if (response.attributes[response.attributes.length - 1].type === 'TEXT') {\n            response.humanReadable = response.attributes[response.attributes.length - 1].value;\n        }\n\n        // Parse and format ATOM values\n        if (response.attributes[0].type === 'ATOM' && response.attributes[0].section) {\n            option = response.attributes[0].section.map((key) => {\n                if (!key) {\n                    return;\n                }\n                if (Array.isArray(key)) {\n                    return key.map((key) => (key.value || '').toString().trim());\n                } else {\n                    return (key.value || '').toString().toUpperCase().trim();\n                }\n            });\n\n            key = option.shift();\n            response.code = key;\n\n            if (option.length === 1) {\n                response[key.toLowerCase()] = option[0];\n            } else if (option.length > 1) {\n                response[key.toLowerCase()] = option;\n            }\n        }\n    };\n\n    /**\n     * Checks if a value is an Error object\n     *\n     * @param {Mixed} value Value to be checked\n     * @return {Boolean} returns true if the value is an Error\n     */\n    Imap.prototype.isError = function(value) {\n        return !!Object.prototype.toString.call(value).match(/Error\\]$/);\n    };\n\n    // COMPRESSION RELATED METHODS\n\n    /**\n     * Sets up deflate/inflate for the IO\n     */\n    Imap.prototype.enableCompression = function() {\n        this._socketOnData = this.socket.ondata;\n        this.compressed = true;\n\n        if (typeof window !== 'undefined' && window.Worker && typeof this._workerPath === 'string') {\n\n            //\n            // web worker support\n            //\n\n            this._compressionWorker = new Worker(this._workerPath);\n            this._compressionWorker.onmessage = (e) => {\n                var message = e.data.message,\n                    buffer = e.data.buffer;\n\n                switch (message) {\n                    case MESSAGE_INFLATED_DATA_READY:\n                        this._socketOnData({\n                            data: buffer\n                        });\n                        break;\n\n                    case MESSAGE_DEFLATED_DATA_READY:\n                        this.waitDrain = this.socket.send(buffer);\n                        break;\n\n                }\n            };\n\n            this._compressionWorker.onerror = (e) => {\n                this._onError(new Error('Error handling compression web worker: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message));\n            };\n\n            // first message starts the worker\n            this._compressionWorker.postMessage(this._createMessage(MESSAGE_START));\n\n        } else {\n\n            //\n            // without web worker support\n            //\n\n            this._compression.inflatedReady = (buffer) => {\n                // emit inflated data\n                this._socketOnData({\n                    data: buffer\n                });\n            };\n\n            this._compression.deflatedReady = (buffer) => {\n                // write deflated data to socket\n                if (!this.compressed) {\n                    return;\n                }\n\n                this.waitDrain = this.socket.send(buffer);\n            };\n        }\n\n        // override data handler, decompress incoming data\n        this.socket.ondata = (evt) => {\n            if (!this.compressed) {\n                return;\n            }\n\n            // inflate\n            if (this._compressionWorker) {\n                this._compressionWorker.postMessage(this._createMessage(MESSAGE_INFLATE, evt.data), [evt.data]);\n            } else {\n                this._compression.inflate(evt.data);\n            }\n        };\n    };\n\n\n\n    /**\n     * Undoes any changes related to compression. This only be called when closing the connection\n     */\n    Imap.prototype._disableCompression = function() {\n        if (!this.compressed) {\n            return;\n        }\n\n        this.compressed = false;\n        this.socket.ondata = this._socketOnData;\n        this._socketOnData = null;\n\n        if (this._compressionWorker) {\n            // terminate the worker\n            this._compressionWorker.terminate();\n            this._compressionWorker = null;\n        }\n    };\n\n    /**\n     * Outgoing payload needs to be compressed and sent to socket\n     *\n     * @param {ArrayBuffer} buffer Outgoing uncompressed arraybuffer\n     */\n    Imap.prototype._sendCompressed = function(buffer) {\n        // deflate\n        if (this._compressionWorker) {\n            this._compressionWorker.postMessage(this._createMessage(MESSAGE_DEFLATE, buffer), [buffer]);\n        } else {\n            this._compression.deflate(buffer);\n        }\n    };\n\n    Imap.prototype._createMessage = function(message, buffer) {\n        return {\n            message: message,\n            buffer: buffer\n        };\n    };\n\n\n    return Imap;\n}));\n"],"sourceRoot":"/source/"}