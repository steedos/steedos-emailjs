{
  "_args": [
    [
      {
        "raw": "git://github.com/steedos/emailjs-smtp-client.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "git://github.com/steedos/emailjs-smtp-client.git",
        "spec": "git://github.com/steedos/emailjs-smtp-client.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:steedos/emailjs-smtp-client.git",
          "sshUrl": "git+ssh://git@github.com/steedos/emailjs-smtp-client.git",
          "httpsUrl": "git+https://github.com/steedos/emailjs-smtp-client.git",
          "gitUrl": "git://github.com/steedos/emailjs-smtp-client.git",
          "shortcut": "github:steedos/emailjs-smtp-client",
          "directUrl": "https://raw.githubusercontent.com/steedos/emailjs-smtp-client/master/package.json"
        }
      },
      "C:\\Users\\dell\\Documents\\GitHub\\apps\\packages\\steedos-emailjs\\.npm\\package-new-bmp89d"
    ]
  ],
  "_from": "git://github.com/steedos/emailjs-smtp-client.git",
  "_id": "emailjs-smtp-client@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/emailjs-smtp-client",
  "_phantomChildren": {},
  "_requested": {
    "raw": "git://github.com/steedos/emailjs-smtp-client.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "git://github.com/steedos/emailjs-smtp-client.git",
    "spec": "git://github.com/steedos/emailjs-smtp-client.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:steedos/emailjs-smtp-client.git",
      "sshUrl": "git+ssh://git@github.com/steedos/emailjs-smtp-client.git",
      "httpsUrl": "git+https://github.com/steedos/emailjs-smtp-client.git",
      "gitUrl": "git://github.com/steedos/emailjs-smtp-client.git",
      "shortcut": "github:steedos/emailjs-smtp-client",
      "directUrl": "https://raw.githubusercontent.com/steedos/emailjs-smtp-client/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git://github.com/steedos/emailjs-smtp-client.git#ada10929b1b23bd2f3eaedd01da2e8d5ccf677a9",
  "_shasum": "6bb89b62738bd2177abab76138e515b5d1ec34b5",
  "_shrinkwrap": null,
  "_spec": "git://github.com/steedos/emailjs-smtp-client.git",
  "_where": "C:\\Users\\dell\\Documents\\GitHub\\apps\\packages\\steedos-emailjs\\.npm\\package-new-bmp89d",
  "author": {
    "name": "Andris Reinman",
    "email": "andris@kreata.ee"
  },
  "bugs": {
    "url": "https://github.com/emailjs/emailjs-smtp-client/issues"
  },
  "dependencies": {
    "emailjs-stringencoding": "^1.0.1",
    "emailjs-tcp-socket": "^1.0.1"
  },
  "description": "SMTP Client allows you to connect to and stream data to a SMTP server in the browser.",
  "devDependencies": {
    "chai": "^3.4.1",
    "grunt": "^0.4.5",
    "grunt-contrib-clean": "^0.7.0",
    "grunt-contrib-connect": "^0.11.2",
    "grunt-contrib-copy": "^0.8.2",
    "grunt-contrib-jshint": "^0.11.3",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-mocha-phantomjs": "^2.0.1",
    "grunt-mocha-test": "^0.12.7",
    "mocha": "^2.3.4",
    "node-forge": "^0.6.39",
    "requirejs": "^2.1.22",
    "simplesmtp": "^0.3.35",
    "sinon": "^1.17.2"
  },
  "gitHead": "ada10929b1b23bd2f3eaedd01da2e8d5ccf677a9",
  "homepage": "https://github.com/emailjs/emailjs-smtp-client",
  "keywords": [
    "SMTP"
  ],
  "license": "MIT",
  "main": "src/emailjs-smtp-client",
  "name": "emailjs-smtp-client",
  "optionalDependencies": {},
  "readme": "# SMTP Client\r\n\r\nSMTP Client allows you to connect to and stream data to a SMTP server in the browser.\r\n\r\n[![Build Status](https://travis-ci.org/emailjs/emailjs-smtp-client.png?branch=master)](https://travis-ci.org/emailjs/emailjs-smtp-client)\r\n\r\n## StringEncoding API\r\n\r\nThis module requires `TextEncoder` and `TextDecoder` to exist as part of the StringEncoding API (see: [MDN](https://developer.mozilla.org/en-US/docs/WebAPI/Encoding_API) [whatwg.org](http://encoding.spec.whatwg.org/#api)). Firefox 19+ is basically the only browser that supports this at the time of writing, while [Chromium in canary, not stable](https://code.google.com/p/chromium/issues/detail?id=243354). Luckily, [there is a polyfill](https://github.com/emailjs/emailjs-stringencoding)!\r\n\r\nDepending on your browser, you might need [this polyfill for ArrayBuffer #slice](https://github.com/ttaubert/node-arraybuffer-slice), e.g. phantomjs.\r\n\r\n## TCPSocket API\r\n\r\nThere is a [shim](https://github.com/emailjs/emailjs-tcp-socket) that brings [Mozilla-flavored](https://developer.mozilla.org/en-US/docs/WebAPI/TCP_Socket) version of the [Raw Socket API](http://www.w3.org/TR/raw-sockets/) to other platforms.\r\n\r\nIf you are on a platform that uses forge instead of a native TLS implementation (e.g. chrome.socket), you have to set the .oncert(pemEncodedCertificate) handler that passes the TLS certificate that the server presents. It can be used on a trust-on-first-use basis for subsequent connection.\r\n\r\nIf forge is used to handle TLS traffic, you may choose to handle the TLS-related load in a Web Worker. Please use tlsWorkerPath to point to `tcp-socket-tls-worker.js`!\r\n\r\nPlease take a look at the [tcp-socket documentation](https://github.com/emailjs/emailjs-tcp-socket) for more information!\r\n\r\n## Installation\r\n\r\n### [npm](https://www.npmjs.org/):\r\n\r\n    npm install --save emailjs-smtp-client\r\n\r\n## Quirks\r\n\r\n  * `STARTTLS` is currently not supported\r\n  * Only `PLAIN`, `USER` and `XOAUTH2` authentication mechanisms are supported. `XOAUTH2` expects a ready to use access token, no tokens are generated automatically.\r\n\r\n## Usage\r\n\r\n### AMD\r\n\r\nRequire [emailjs-smtp-client.js](src/emailjs-smtp-client.js) as `emailjs-smtp-client`\r\n\r\n### Global context\r\n\r\nInclude files [emailjs-smtp-client-response-parser.js](src/emailjs-smtp-client-response-parser.js) and [emailjs-smtp-client.js](src/emailjs-smtp-client.js) on the page.\r\n\r\n```html\r\n<script src=\"emailjs-smtp-client-response-parser.js\"></script>\r\n<script src=\"emailjs-smtp-client.js\"></script>\r\n```\r\n\r\nThis exposes global variable `emailjs-smtp-client`\r\n\r\n## API\r\n\r\nCreate `SmtpClient` object with:\r\n\r\n```javascript\r\nvar client = new SmtpClient(host, port, options)\r\n```\r\n\r\nwhere\r\n\r\n  * **host** is the hostname to connect to (defaults to \"localhost\")\r\n  * **port** is the port to connect to\r\n  * **options** is an optional options object (see below)\r\n\r\n## Connection options\r\n\r\nThe following connection options can be used with `simplesmtp.connect`:\r\n\r\n  * **useSecureTransport** *Boolean* Set to true, to use encrypted connection\r\n  * **name** *String* Client hostname for introducing itself to the server\r\n  * **auth** *Object* Authentication options. Depends on the preferred authentication method\r\n    * **user** is the username for the user (also applies to OAuth2)\r\n    * **pass** is the password for the user if plain auth is used\r\n    * **xoauth2** is the OAuth2 access token to be used instead of password. If both password and xoauth2 token are set, the token is preferred.\r\n  * **authMethod** *String* Force specific authentication method (eg. `\"PLAIN\"` for using `AUTH PLAIN` or `\"XOAUTH2\"` for `AUTH XOAUTH2`)\r\n  * **ca** (optional) (only in conjunction with this [TCPSocket shim](https://github.com/emailjs/emailjs-tcp-socket)) if you use TLS with forge, pin a PEM-encoded certificate as a string. Please refer to the [tcp-socket documentation](https://github.com/emailjs/emailjs-tcp-socket) for more information!\r\n  * **tlsWorkerPath** (optional) (only in conjunction with this [TCPSocket shim](https://github.com/emailjs/emailjs-tcp-socket)) if you use TLS with forge, this path indicates where the file for the TLS Web Worker is located. Please refer to the [tcp-socket documentation](https://github.com/emailjs/emailjs-tcp-socket) for more information!\r\n  * **disableEscaping** *Boolean* If set to true, do not escape dots on the beginning of the lines\r\n  * **logLength** *Number* How many messages between the client and the server to log. Set to false to disable logging. Defaults to 6\r\n  * **ignoreTLS** – if set to true, do not issue STARTTLS even if the server supports it\r\n  * **requireTLS** – if set to true, always use STARTTLS before authentication even if the host does not advertise it. If STARTTLS fails, do not try to authenticate the user\r\n  * **lmtp** - if set to true use LMTP commands instead of SMTP commands\r\n\r\nDefault STARTTLS support is opportunistic – if the server advertises STARTTLS in EHLO response, the client tries to use it. If STARTTLS is not advertised, the clients sends passwords in the plain. You can use `ignoreTLS` and `requireTLS` to change this behavior by explicitly enabling or disabling STARTTLS usage.\r\n\r\n### XOAUTH2\r\n\r\nTo authenticate using XOAUTH2, use the following authentication config\r\n\r\n```javascript\r\nvar config = {\r\n    auth: {\r\n      user: 'username',\r\n      xoauth2: 'access_token'\r\n  }\r\n};\r\n```\r\n\r\nSee [XOAUTH2 docs](https://developers.google.com/gmail/xoauth2_protocol#smtp_protocol_exchange) for more info.\r\n\r\n## Connection events\r\n\r\nOnce a connection is set up the following events can be listened to:\r\n\r\n  * **onidle** - the connection to the SMTP server has been successfully set up and the client is waiting for an envelope. **NB!** this event is emitted multiple times - if an e-mail has been sent and the client has nothing to do, `onidle` is emitted again.\r\n  * **onready** `(failedRecipients)` - the envelope is passed successfully to the server and a message stream can be started. The argument is an array of e-mail addresses not accepted as recipients by the server. If none of the recipient addresses is accepted, `onerror` is emitted instead.\r\n  * **ondone** `(success)` - the message was sent\r\n  * **onerror** `(err)` - An error occurred. The connection will be closed shortly afterwards, so expect an `onclose` event as well\r\n  * **onclose** `(isError)` - connection to the client is closed. If `isError` is true, the connection is closed because of an error\r\n\r\nExample:\r\n\r\n```javascript\r\nclient.onidle = function(){\r\n    console.log(\"Connection has been established\");\r\n    // this event will be called again once a message has been sent\r\n    // so do not just initiate a new message here, as infinite loops might occur\r\n}\r\n```\r\n\r\n## Sending an envelope\r\n\r\nWhen an `onidle` event is emitted, an envelope object can be sent to the server.\r\nThis includes a string `from` and a single string or an array of strings for `to` property.\r\n\r\nEnvelope can be sent with `client.useEnvelope(envelope)`\r\n\r\n```javascript\r\n// run only once as 'idle' is emitted again after message delivery\r\nvar alreadySending = false;\r\n\r\nclient.onidle = function(){\r\n    if(alreadySending){\r\n        return;\r\n    }\r\n    alreadySending = true;\r\n    client.useEnvelope({\r\n        from: \"me@example.com\",\r\n        to: [\"receiver1@example.com\", \"receiver2@example.com\"]\r\n    });\r\n}\r\n```\r\n\r\nThe `to` part of the envelope must include **all** recipients from `To:`, `Cc:` and `Bcc:` fields.\r\n\r\nIf envelope setup up fails, an error is emitted. If only some (not all)\r\nrecipients are not accepted, the mail can still be sent. An `onready` event\r\nis emitted when the server has accepted the `from` and at least one `to`\r\naddress.\r\n\r\n```javascript\r\nclient.onready = function(failedRecipients){\r\n    if(failedRecipients.length){\r\n        console.log(\"The following addresses were rejected: \", failedRecipients);\r\n    }\r\n    // start transfering the e-mail\r\n}\r\n```\r\n\r\n## Sending a message\r\n\r\nWhen `onready` event is emitted, it is possible to start sending mail. To do this\r\nyou can send the message with `client.send` calls (you also need to call `client.end()` once\r\nthe message is completed).\r\n\r\n`send` method returns the state of the downstream buffer - if it returns `true`, it is safe to send more data, otherwise you should (but don't have to) wait for the `ondrain` event before you send more data.\r\n\r\n**NB!** you do not have to escape the dots in the beginning of the lines by yourself (unless you specificly define so with `disableEscaping` option).\r\n\r\n```javascript\r\nclient.onready = function(){\r\n    client.send(\"Subject: test\\r\\n\");\r\n    client.send(\"\\r\\n\");\r\n    client.send(\"Message body\");\r\n    client.end();\r\n}\r\n```\r\n\r\nOnce the message is delivered an `ondone` event is emitted. The event has an\r\nparameter which indicates if the message was accepted by the server (`true`) or not (`false`).\r\n\r\n```\r\nclient.ondone = function(success){\r\n    if(success){\r\n        console.log(\"The message was transmitted successfully with \"+response);\r\n    }\r\n}\r\n```\r\n\r\n## Logging\r\n\r\nAt any time you can access the traffic log between the client and the server from the `client.log` array.\r\n\r\n```javascript\r\nclient.ondone = function(success){\r\n    // show the last message\r\n    console.log(client.log.slice(-1));\r\n}\r\n```\r\n\r\n## Closing the connection\r\n\r\nOnce you have done sending messages and do not want to keep the connection open, you can gracefully close the connection with `client.quit()` or non-gracefully (if you just want to shut down the connection and do not care for the server) with `client.close()`.\r\n\r\nIf you run `quit` or `close` in the `ondone` event, then the next `onidle` is never called.\r\n\r\n## Get your hands dirty\r\n\r\n    git clone git@github.com:whiteout-io/smtpclient.git\r\n    cd smtpclient\r\n    npm install && npm test\r\n\r\nTo run the integration tests against a local smtp server\r\n\r\n    grunt smtp\r\n    add the test folder as a chrome app (chrome settings -> extensions -> check 'developer mode' -> load unpacked extension)\r\n\r\n## License\r\n\r\n    Copyright (c) 2013 Andris Reinman\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy\r\n    of this software and associated documentation files (the \"Software\"), to deal\r\n    in the Software without restriction, including without limitation the rights\r\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the Software is\r\n    furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in\r\n    all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n    THE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/emailjs/emailjs-smtp-client.git"
  },
  "scripts": {
    "pretest": "dir=$(pwd) && cd node_modules/node-forge/ && npm install && npm run minify && cd $dir",
    "test": "grunt"
  },
  "version": "1.0.0"
}
