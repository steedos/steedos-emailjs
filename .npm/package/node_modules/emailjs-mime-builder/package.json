{
  "_args": [
    [
      {
        "raw": "git://github.com/steedos/emailjs-mime-builder.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "git://github.com/steedos/emailjs-mime-builder.git",
        "spec": "git://github.com/steedos/emailjs-mime-builder.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:steedos/emailjs-mime-builder.git",
          "sshUrl": "git+ssh://git@github.com/steedos/emailjs-mime-builder.git",
          "httpsUrl": "git+https://github.com/steedos/emailjs-mime-builder.git",
          "gitUrl": "git://github.com/steedos/emailjs-mime-builder.git",
          "shortcut": "github:steedos/emailjs-mime-builder",
          "directUrl": "https://raw.githubusercontent.com/steedos/emailjs-mime-builder/master/package.json"
        }
      },
      "C:\\Users\\dell\\Documents\\GitHub\\apps\\packages\\steedos-emailjs\\.npm\\package-new-bmp89d"
    ]
  ],
  "_from": "git://github.com/steedos/emailjs-mime-builder.git",
  "_id": "emailjs-mime-builder@1.0.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/emailjs-mime-builder",
  "_phantomChildren": {},
  "_requested": {
    "raw": "git://github.com/steedos/emailjs-mime-builder.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "git://github.com/steedos/emailjs-mime-builder.git",
    "spec": "git://github.com/steedos/emailjs-mime-builder.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:steedos/emailjs-mime-builder.git",
      "sshUrl": "git+ssh://git@github.com/steedos/emailjs-mime-builder.git",
      "httpsUrl": "git+https://github.com/steedos/emailjs-mime-builder.git",
      "gitUrl": "git://github.com/steedos/emailjs-mime-builder.git",
      "shortcut": "github:steedos/emailjs-mime-builder",
      "directUrl": "https://raw.githubusercontent.com/steedos/emailjs-mime-builder/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git://github.com/steedos/emailjs-mime-builder.git#bfbfeee99472fb3fd96262aff612a9a6bc0ecb0f",
  "_shasum": "9a0aeef6e28060708260003e99a6ecfae49a3c86",
  "_shrinkwrap": null,
  "_spec": "git://github.com/steedos/emailjs-mime-builder.git",
  "_where": "C:\\Users\\dell\\Documents\\GitHub\\apps\\packages\\steedos-emailjs\\.npm\\package-new-bmp89d",
  "author": {
    "name": "Andris Reinman",
    "email": "andris@kreata.ee"
  },
  "bugs": {
    "url": "https://github.com/emailjs/emailjs-mime-builder/issues"
  },
  "dependencies": {
    "emailjs-addressparser": "^1.0.1",
    "emailjs-mime-codec": "^1.0.1",
    "emailjs-mime-types": "^1.0.0",
    "punycode": "^1.4.0"
  },
  "description": "emailjs-mime-builder is a low level rfc2822 message composer. Define your own mime tree, no magic included.",
  "devDependencies": {
    "amdefine": "^1.0.0",
    "chai": "^3.4.1",
    "grunt": "^0.4.5",
    "grunt-contrib-connect": "^0.11.2",
    "grunt-contrib-jshint": "^0.11.3",
    "grunt-mocha-phantomjs": "^2.0.1",
    "grunt-mocha-test": "^0.12.7",
    "mocha": "^2.3.4",
    "phantomjs": "^1.9.19",
    "requirejs": "^2.1.22",
    "sinon": "^1.17.2"
  },
  "gitHead": "bfbfeee99472fb3fd96262aff612a9a6bc0ecb0f",
  "homepage": "https://github.com/emailjs/emailjs-mime-builder",
  "keywords": [
    "RFC2822",
    "mime"
  ],
  "license": "MIT",
  "main": "src/emailjs-mime-builder",
  "name": "emailjs-mime-builder",
  "optionalDependencies": {},
  "readme": "# emailjs-mime-builder\r\n\r\n*emailjs-mime-builder* is a low level rfc2822 message composer. Define your own mime tree, no magic included.\r\n\r\n[![Build Status](https://travis-ci.org/emailjs/emailjs-mime-builder.png?branch=master)](https://travis-ci.org/emailjs/emailjs-mime-builder)\r\n\r\n## StringEncoding API\r\n\r\nThis module requires `TextEncoder` and `TextDecoder` to exist as part of the StringEncoding API (see: [MDN](https://developer.mozilla.org/en-US/docs/WebAPI/Encoding_API) [whatwg.org](http://encoding.spec.whatwg.org/#api)). Firefox 19+ and Chrome M38+ support this. For the others, [there is a polyfill](https://github.com/whiteout-io/stringencoding)!\r\n\r\n## Installation\r\n\r\n### [npm](https://www.npmjs.org/):\r\n\r\n    npm install --save mailbuild\r\n\r\n### Dependencies\r\n\r\nThis module has dependencies that will be fetched automatically.\r\n\r\n* [emailjs-mime-codec](https://github.com/emailjs/emailjs-mime-codec/)\r\n* [emailjs-mime-types](https://github.com/emailjs/emailjs-mime-types/)\r\n* [emailjs-addressparser](https://github.com/emailjs/emailjs-addressparser/)\r\n* [punycode.js](https://github.com/bestiejs/punycode.js)\r\n* [emailjs-stringencoding](https://github.com/emailjs/emailjs-stringencoding)\r\n\r\n## API\r\n\r\nCreate a new `MimeBuilder` object with\r\n\r\n```javascript\r\nvar builder = new MimeBuilder(contentType [, options]);\r\n```\r\n\r\nWhere\r\n\r\n  * **contentType** - define the content type for created node. Can be left blank for attachments (content type derived from `filename` option if available)\r\n  * **options** - an optional options object\r\n    * **filename** - *String* filename for an attachment node\r\n    * **baseBoundary** - *String* shared part of the unique multipart boundary (generated randomly if not set)\r\n\r\n## Methods\r\n\r\nThe same methods apply to the root node created with `new MimeBuilder()` and to any child nodes.\r\n\r\n### createChild\r\n\r\nCreates and appends a child node to the node object\r\n\r\n```javascript\r\nnode.createChild(contentType, options)\r\n```\r\n\r\nThe same arguments apply as with `new MimeBuilder()`. Created node object is returned.\r\n\r\n**Example**\r\n\r\n```javascript\r\nnew MimeBuilder(\"multipart/mixed\").\r\n    createChild(\"multipart/related\").\r\n        createChild(\"text/plain\");\r\n```\r\n\r\nGenerates the following mime tree:\r\n\r\n```\r\nmultipart/mixed\r\n  ↳ multipart/related\r\n      ↳ text/plain\r\n```\r\n\r\n### appendChild\r\n\r\nAppends an existing child node to the node object. Removes the node from an existing tree if needed.\r\n\r\n```javascript\r\nnode.appendChild(childNode)\r\n```\r\n\r\nWhere\r\n\r\n  * **childNode** - child node to be appended\r\n\r\nMethod returns appended child node.\r\n\r\n**Example**\r\n\r\n```javascript\r\nvar childNode = new MimeBuilder(\"text/plain\"),\r\n    rootNode = new MimeBuilder(\"multipart/mixed\");\r\nrootnode.appendChild(childNode);\r\n```\r\n\r\nGenerates the following mime tree:\r\n\r\n```\r\nmultipart/mixed\r\n  ↳ text/plain\r\n```\r\n\r\n## replace\r\n\r\nReplaces current node with another node\r\n\r\n```javascript\r\nnode.replace(replacementNode)\r\n```\r\n\r\nWhere\r\n\r\n  * **replacementNode** - node to replace the current node with\r\n\r\nMethod returns replacement node.\r\n\r\n**Example**\r\n\r\n```javascript\r\nvar rootNode = new MimeBuilder(\"multipart/mixed\"),\r\n    childNode = rootNode.createChild(\"text/plain\");\r\nchildNode.replace(new MimeBuilder(\"text/html\"));\r\n```\r\n\r\nGenerates the following mime tree:\r\n\r\n```\r\nmultipart/mixed\r\n  ↳ text/html\r\n```\r\n\r\n## remove\r\n\r\nRemoves current node from the mime tree. Does not make a lot of sense for a root node.\r\n\r\n```javascript\r\nnode.remove();\r\n```\r\n\r\nMethod returns removed node.\r\n\r\n**Example**\r\n\r\n```javascript\r\n\r\nvar rootNode = new MimeBuilder(\"multipart/mixed\"),\r\n    childNode = rootNode.createChild(\"text/plain\");\r\nchildNode.remove();\r\n```\r\n\r\nGenerates the following mime tree:\r\n\r\n```\r\nmultipart/mixed\r\n```\r\n\r\n## setHeader\r\n\r\nSets a header value. If the value for selected key exists, it is overwritten.\r\n\r\nYou can set multiple values as well by using `[{key:\"\", value:\"\"}]` or\r\n`{key: \"value\"}` structures as the first argument.\r\n\r\n```javascript\r\nnode.setHeader(key, value);\r\n```\r\n\r\nWhere\r\n\r\n  * **key** - *String|Array|Object* Header key or a list of key value pairs\r\n  * **value** - *String* Header value\r\n\r\nMethod returns current node.\r\n\r\n**Example**\r\n\r\n```javascript\r\nnew MimeBuilder(\"text/plain\").\r\n    setHeader(\"content-disposition\", \"inline\").\r\n    setHeader({\r\n        \"content-transfer-encoding\": \"7bit\"\r\n    }).\r\n    setHeader([\r\n        {key: \"message-id\", value: \"abcde\"}\r\n    ]);\r\n```\r\n\r\nGenerates the following header:\r\n\r\n```\r\nContent-type: text/plain\r\nContent-Disposition: inline\r\nContent-Transfer-Encoding: 7bit\r\nMessage-Id: <abcde>\r\n```\r\n\r\n## addHeader\r\n\r\nAdds a header value. If the value for selected key exists, the value is appended\r\nas a new field and old one is not touched.\r\n\r\nYou can set multiple values as well by using `[{key:\"\", value:\"\"}]` or\r\n`{key: \"value\"}` structures as the first argument.\r\n\r\n```javascript\r\nnode.addHeader(key, value);\r\n```\r\n\r\nWhere\r\n\r\n  * **key** - *String|Array|Object* Header key or a list of key value pairs\r\n  * **value** - *String* Header value\r\n\r\nMethod returns current node.\r\n\r\n**Example**\r\n\r\n```javascript\r\nnew MimeBuilder(\"text/plain\").\r\n    addHeader(\"X-Spam\", \"1\").\r\n    setHeader({\r\n        \"x-spam\": \"2\"\r\n    }).\r\n    setHeader([\r\n        {key: \"x-spam\", value: \"3\"}\r\n    ]);\r\n```\r\n\r\nGenerates the following header:\r\n\r\n```\r\nContent-type: text/plain\r\nX-Spam: 1\r\nX-Spam: 2\r\nX-Spam: 3\r\n```\r\n\r\n## getHeader\r\n\r\nRetrieves the first mathcing value of a selected key\r\n\r\n```javascript\r\nnode.getHeader(key)\r\n```\r\n\r\nWhere\r\n\r\n  * **key** - *String* Key to search for\r\n\r\n**Example**\r\n\r\n```javascript\r\nnew MimeBuilder(\"text/plain\").getHeader(\"content-type\"); // text/plain\r\n```\r\n\r\n## setContent\r\n\r\nSets body content for current node. If the value is a string, charset is added automatically\r\nto Content-Type (if it is `text/*`). If the value is a Typed Array, you need to specify the charset yourself.\r\n\r\n```javascript\r\nnode.setContent(body)\r\n```\r\n\r\nWhere\r\n\r\n  * **body** - *String|Uint8Array* body content\r\n\r\n**Example**\r\n\r\n```javascript\r\nnew MimeBuilder(\"text/plain\").setContent(\"Hello world!\");\r\n```\r\n\r\n## build\r\n\r\nBuilds the rfc2822 message from the current node. If this is a root node, mandatory header fields are set if missing (Date, Message-Id, MIME-Version)\r\n\r\n```javascript\r\nnode.build()\r\n```\r\n\r\nMethod returns the rfc2822 message as a string\r\n\r\n**Example**\r\n\r\n```javascript\r\nnew MimeBuilder(\"text/plain\").setContent(\"Hello world!\").build();\r\n```\r\n\r\nReturns the following string:\r\n\r\n```\r\nContent-type: text/plain\r\nDate: <current datetime>\r\nMessage-Id: <generated value>\r\nMIME-Version: 1.0\r\n\r\nHello world!\r\n```\r\n\r\n## getEnvelope\r\n\r\nGenerates a SMTP envelope object. Makes sense only for root node.\r\n\r\n```javascript\r\nvar envelope = node.generateEnvelope()\r\n```\r\n\r\nMethod returns the envelope in the form of `{from:'address', to: ['addresses']}`\r\n\r\n**Example**\r\n\r\n```javascript\r\nnew MimeBuilder().\r\n    addHeader({\r\n        from: \"From <from@example.com>\",\r\n        to: \"receiver1@example.com\",\r\n        cc: \"receiver2@example.com\"\r\n    }).\r\n    getEnvelope();\r\n```\r\n\r\nReturns the following object:\r\n\r\n```json\r\n{\r\n    \"from\": \"from@example.com\",\r\n    \"to\": [\"receiver1@example.com\", \"receiver2@example.com\"]\r\n}\r\n```\r\n\r\n## Notes\r\n\r\n### Addresses\r\n\r\nWhen setting address headers (`From`, `To`, `Cc`, `Bcc`) use of unicode is allowed. If needed\r\nthe addresses are converted to punycode automatically.\r\n\r\n### Attachments\r\n\r\nFor attachments you should minimally set `filename` option and `Content-Disposition` header. If filename is specified, you can leave content type blank - if content type is not set, it is detected from the filename.\r\n\r\n```javascript\r\nnew MimeBuilder(\"multipart/mixed\").\r\n  createChild(false, {filename: \"image.png\"}).\r\n  setHeader(\"Content-Disposition\", \"attachment\");\r\n```\r\n\r\nObviously you might want to add `Content-Id` header as well if you want to reference this attachment from the HTML content.\r\n\r\n### MIME structure\r\n\r\nMost probably you only need to deal with the following multipart types when generating messages:\r\n\r\n  * **multipart/alternative** - includes the same content in different forms (usually text/plain + text/html)\r\n  * **multipart/related** - includes main node and related nodes (eg. text/html + referenced attachments)\r\n  * **multipart/mixed** - includes other multipart nodes and attachments, or single content node and attachments\r\n\r\n**Examples**\r\n\r\nOne content node and an attachment\r\n\r\n```\r\nmultipart/mixed\r\n  ↳ text/plain\r\n  ↳ image/png\r\n```\r\n\r\nContent node with referenced attachment (eg. image with `Content-Type` referenced by `cid:` url in the HTML)\r\n\r\n```\r\nmultipart/related\r\n  ↳ text/html\r\n  ↳ image/png\r\n```\r\n\r\nPlaintext and HTML alternatives\r\n\r\n```\r\nmultipart/alternative\r\n  ↳ text/html\r\n  ↳ text/plain\r\n```\r\n\r\nOne content node with referenced attachment and a regular attachment\r\n\r\n```\r\nmultipart/mixed\r\n  ↳ multipart/related\r\n    ↳ text/plain\r\n    ↳ image/png\r\n  ↳ application/x-zip\r\n```\r\n\r\nAlternative content with referenced attachment for HTML and a regular attachment\r\n\r\n```\r\nmultipart/mixed\r\n  ↳ multipart/alternative\r\n    ↳ text/plain\r\n    ↳ multipart/related\r\n      ↳ text/html\r\n      ↳ image/png\r\n  ↳ application/x-zip\r\n```\r\n\r\n## Get your hands dirty\r\n\r\n```\r\ngit clone git@github.com:whiteout-io/mailbuild.git\r\ncd mailbuild\r\nnpm install && npm test\r\ngrunt dev\r\ngo to http://localhost:12345/example/ to run the example\r\ngo to http://localhost:12345/test/ to run the tests in your browser of choice\r\n```\r\n\r\n## License\r\n\r\n    Copyright (c) 2013 Andris Reinman\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy\r\n    of this software and associated documentation files (the \"Software\"), to deal\r\n    in the Software without restriction, including without limitation the rights\r\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the Software is\r\n    furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in\r\n    all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n    THE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/emailjs/emailjs-mime-builder.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "version": "1.0.1"
}
